<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Search extends MY_Controller {

    public function __construct() {
        parent::__construct(); // getting base constructor
    }


    public function index(){

        if(!$_POST){

            $data["data"]["searchables"] = $this->search_gate->get_searchables();       
            $data["data"]["advanced_search"] = TRUE;            
            $data["data"]["hide_cats"] = TRUE;            

            $data["views"]["title"] = word("advanced_search");                                
            $data["views"]["header"] = 'inner';           
            $data["views"]["footer"] = 'inner';                   
            $data["views"]["full_width"] = TRUE;
            $data["views"]["content"] = "search/forms/advanced";

            $this->load->view(design_path.'/templates/main/core',$data);         

        }else{
            $this->handle_advanced();
        }

    }   


    public function search_submit(){

        $valid = $this->search_gate->validate_posted_data();
                  
        /// logging
        if($valid){
            $this->access->log_search($valid);
        }
        /// logging        
        
        $url = $this->search_gate->create_search_url($valid);

        redirect(base_url(front_base."search/results/1?".$url));

    }


    public function results($page=1){

        $limit = 10;
        $sort  = $this->input->get("sort");

        $valid = $this->search_gate->validate_url_data(); 

        $data= array(
            "data"      => $valid,            
            "faceting"  => TRUE,            
            "page"      => $page, // could be set by get parameter
            "limit"     => $limit,            
            "similar"   => FALSE,            
            "sort"      => $sort,
        );
        $results = $this->search_solr->query_solr($data);

        
        $books_ids = $this->searcher->ids_array($results["results"]);

        $count = $results["pagination"]["total"];

        $pagination = $this->base->paginate_me($count,$limit,front_base."search/results/",3);            
        
        $results["pagination"]["links"] = $pagination["links"];

       
        $this->load->model("Social_action","social");
        $books = @$results["results"];
        
        if(logged_in && $books){
            $books_ids = $this->searcher->ids_array($books); 
            $data["data"]["favs"] = $this->social->fetch_favs($books_ids);        
            $data["data"]["ratings"] =  $this->social->fetch_ratings($books_ids);        
            $data["data"]["purchases"] = $this->shopping->get_purchased($books_ids);
        }        

        
        $data["data"]["books"] = $books;        
        
        $data["data"]["facets"] = $results["facets"];                
        $data["data"]["pagination"] = $results["pagination"];  

        $data["data"]["sort"] = $results["sort"];          
        $data["data"]["filters"] = $results["filters"];                          
        $data["data"]["keywords"] = $results["keywords"];                
        $data["data"]["queries"] = $results["queries"];                

        $data["views"]["title"] = $page > 1 ? word("search_results").' - '.word("page")." ".$page : word("search_results");                                
        $data["views"]["header"] = 'inner';           
        $data["views"]["footer"] = 'inner';           
        $data["views"]["full_width"] = TRUE;
        $data["views"]["content"] = "search/metadata";

        $this->load->view(design_path.'/templates/main/core',$data);


    }



}